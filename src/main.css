html,
body {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: Arial, sans-serif;
    color: white;
    background: var(--editor-background);
    overflow: hidden;
}

input {
    color: var(--editor-foreground);
    background: var(--editor-background);
    border: 1px solid var(--editor-background);
    padding: 5px;
    border-radius: 3px;
}

button {
    color: var(--editor-foreground);
    background: var(--editor-background);
    border: 1px solid var(--editor-background);
    padding: 5px;
    border-radius: 3px;
    cursor: pointer;
}
/* === Identifiers & Types === */
.token.identifier,
.token.shorthand_property_identifier_pattern {
    color: var(--token-identifier);
}

.token.type_identifier,
.token.builtin_type,
.token.struct,
.token.enum,
.token.union {
    color: var(--token-type);
}

.token.field_identifier,
.token.property_identifier,
.token.attribute,
.token.decorator {
    color: var(--token-type);
}

.token.variable,
.token.variable_name {
    color: var(--token-identifier);
}

/* === Keywords === */
.token.keyword,
.token.control_keyword,
.token.storage_modifier,
.token.async,
.token.await,
.token.try,
.token.catch,
.token.yield,
.token.break,
.token.continue,
.token.return,
.token.default,
.token.else,
.token.if,
.token.switch,
.token.case,
.token.for,
.token.while,
.token.do,
.token.in,
.token.of,
.token.from,
.token.to,
.token.as {
    color: var(--token-keyword);
}

/* === Function & Method === */
.token.function_item,
.token.function,
.token.method,
.token.function_definition,
.token.method_definition,
.token.call_expression {
    color: var(--token-function);
}

/* === Constants, Booleans, Literals === */
.token.const,
.token.constant,
.token.enum_constant,
.token.boolean_literal {
    color: var(--token-constant);
}

.token.null_literal {
    color: var(--token-literal);
}

/* === Strings === */
.token.string,
.token.string_literal,
.token.string_fragment,
.token.string_literal_content,
.token.string_content {
    color: var(--token-string);
}

.token.template_string {
    color: var(--token-string);
}

.token.escape_sequence {
    color: var(--token-escape-sequence);
}

/* === Numbers === */
.token.number,
.token.float_literal,
.token.integer_literal {
    color: var(--token-number);
}

/* === Comments === */
.token.comment,
.token.line_comment,
.token.block_comment,
.token.doc_comment {
    color: var(--token-comment);
    font-style: italic;
}

/* === Import/Export === */
.token.import,
.token.export,
.token.module {
    color: var(--token-type);
}

/* === Regex === */
.token.regex,
.token.regex_pattern {
    color: var(--token-regex);
    font-style: italic;
}

/* === Error === */
.token.ERROR {
    background: var(--token-error-background);
    color: var(--token-error);
    font-weight: bold;
    text-decoration: underline wavy var(--token-error);
}

/* === Operators === */
.token.operator,
.token.binary_expression,
.token.unary_expression,
.token.assignment_expression {
    color: var(--token-literal);
}

.token.equal,
.token.not_equal,
.token.less_than,
.token.greater_than,
.token.less_than_equal,
.token.greater_than_equal {
    color: var(--token-literal);
}

/* === Booleans === */
.token.true,
.token.false {
    color: var(--token-constant);
}

/* === Punctuation === */
.token._7b,
.token._7d {
    color: var(--token-punctuation-curly);
} /* { } */
.token._28,
.token._29 {
    color: var(--token-punctuation-parens);
} /* ( ) */
.token._5b,
.token._5d {
    color: var(--token-punctuation-parens);
} /* [ ] */
.token._3b {
    color: var(--token-literal);
} /* ; */
.token._2c {
    color: var(--token-literal);
} /* , */
.token._3a {
    color: var(--token-literal);
} /* : */
.token._22 {
    color: var(--token-string);
} /* " */
.token._27 {
    color: var(--token-string);
} /* ' */
.token._21 {
    color: var(--token-error);
} /* ! */
.token._3f {
    color: var(--token-error);
} /* ? */
.token._2e {
    color: var(--token-literal);
} /* . */
.token._2b {
    color: var(--token-literal);
} /* + */
.token._2d {
    color: var(--token-literal);
} /* - */
.token._2a {
    color: var(--token-literal);
} /* * */
.token._2f {
    color: var(--token-literal);
} /* / */
.token._3d {
    color: var(--token-literal);
} /* = */
.token._26 {
    color: var(--token-literal);
} /* & */
.token._7c {
    color: var(--token-literal);
} /* | */
.token._5e {
    color: var(--token-literal);
} /* ^ */
.token._25 {
    color: var(--token-literal);
} /* % */
.token._7e {
    color: var(--token-literal);
} /* ~ */

/* === Misc === */
.token.tag_name,
.token.tag {
    color: var(--token-constant);
}

.token.attribute_name {
    color: var(--token-identifier);
}

.token.attribute_value {
    color: var(--token-string);
}

.token.class_name,
.token.constructor {
    color: var(--token-type);
}

.token.namespace {
    color: var(--token-number);
}

.token.parameter {
    color: var(--token-identifier);
}

.token.annotation {
    color: var(--token-keyword);
}

/* === Find Match Highlight === */
.token.find-match {
    background-color: var(--token-find-match-background);
    border-radius: 3px;
}
